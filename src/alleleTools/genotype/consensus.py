"""
Consensus HLA Genotyping Module.

This module generates consensus HLA genotypes from multiple genotyping
algorithm results. It handles the integration of results from different HLA
typing tools, resolves conflicts, and produces high-confidence consensus calls.
It is initially designed to work with the JSON reports generated by the IKMB
HLA genotyping pipeline.

Input formats:
- JSON reports from IKMB HLA genotyping pipeline

Author: Nicolás Mendoza Mejía (2023)
"""

from typing import List, Tuple

import numpy as np
import pandas as pd

from ..allele import Allele, FieldTree
from ..argtypes import file_path, output_path
from ..convert.alleleTable import AlleleTable
from .ikmb_report import Gene, Report, read_json


def setup_parser(subparsers):
    """
    Set up the argument parser for the consensus command.

    Args:
        subparsers: The subparsers object to add this command to.

    Returns:
        argparse.ArgumentParser: The configured parser for consensus.
    """
    parser = subparsers.add_parser(
        name="consensus",
        description="""
        This program finds a consensus between multiple HLA genotyping reports
        """,
        epilog="Author: Nicolás Mendoza Mejía (2023)",
    )
    parser.add_argument(
        "input",
        metavar="path",
        type=str,
        nargs="+",
        help="JSON files with HLA genotyping reports from the IKMB pipeline",
    )
    parser.add_argument(
        "--min_coverage",
        type=float,
        help="Minimum coverage threshold",
        default=100.0,
    )
    parser.add_argument(
        "--min_support",
        type=float,
        help="Proportion of algorithms supporting the consensus call",
        default=0.6,
    )
    parser.add_argument(
        "--phe",
        type=file_path,
        help="input phe file name (to add phenotype column)",
        default="",
    )
    parser.add_argument(
        "--output",
        metavar="path",
        type=output_path,
        help="Path to output file",
        default="output.alt",
    )

    parser.set_defaults(func=call_function)

    return parser


def call_function(args):
    """
    Main function to execute consensus genotyping.

    Processes multiple JSON genotyping reports and generates consensus
    HLA calls using evidence-based algorithms. Outputs results in
    allele table format.

    Args:
        args: Parsed command line arguments containing:
            - input: List of JSON file handles with genotyping reports
            - output: Path to output consensus file
    """
    reports = list()
    for file in args.input:
        j = read_json(file)
        report = ConsensusReport(j)
        reports.extend(report.consensus(args.min_support))

    # Filter under covered sample's genes
    df = pd.DataFrame(reports)
    df = df[df["coverage"] >= args.min_coverage]

    # Convert and save file
    alt = reports_as_allele_table(df, args.phe)
    alt.to_csv(args.output)


def reports_as_allele_table(reports: pd.DataFrame, phe_file: str) -> AlleleTable:
    # reports["alleles"].fillna("").apply(list)
    # pivot table
    df_pivot = reports.pivot_table(
        values="alleles",
        index=["sample"],
        columns=["gene"],
        aggfunc="sum",
    )

    # Gene columns have a list of one or two alleles
    # extract those alleles into [gene_name]_1 and [gene_name]_2
    genes = df_pivot.columns
    genes = [gene for gene in genes if gene != "sample"]
    for gene in genes:
        # Fill non genotyped alleles or filtered alleles
        pairs = df_pivot.pop(gene).fillna("").apply(list).tolist()
        # Expand the pair to two columns
        df_pivot[[f"{gene}_1", f"{gene}_2"]] = pd.DataFrame(
            pairs, index=df_pivot.index)

    # Replace "" with nan
    df_pivot.replace("", np.nan, inplace=True)

    alt = AlleleTable()
    alt.alleles = df_pivot
    alt.load_phenotype(phe_file)

    return alt


class ConsensusGene(Gene):
    def get_consensus_call(
            self, min_support: float
    ) -> Tuple[List[str], List[float]]:
        """
        Determine the consensus alleles and returns two values

        Args:
            min_support (float): Minimum support threshold for consensus calls.

        Returns:
            alleles: list of consensus alleles
            support: percentage of algorithms supported the consensus alleles
        """
        tree = FieldTree(self.name)
        for tool, alleles in self.calls.items():
            alleles = set(alleles)
            for allele in alleles:
                p_allele = Allele(allele, gene=self.name)
                tree.add(p_allele.fields)

        alleles, support = tree.get_consensus(min_support=min_support)
        return alleles, support

    def consensus_dict(self, min_support: float) -> dict:
        """
        Convert this object into a dictionary

        Args:
            min_support (float): Minimum support threshold for consensus calls.

        Returns:
            dict: Dictionary representation of the consensus gene.
        """
        alleles, support = self.get_consensus_call(min_support)
        return {
            "gene": self.name,
            "coverage": self.mean_coverage(),
            "alleles": alleles,
            "support": support,
        }


class ConsensusReport(Report):
    def __parse_gene__(
        self, name: str, coverage: List[dict], calls: dict
    ) -> ConsensusGene:
        return ConsensusGene(name, coverage, calls)

    def consensus(self, min_support: float) -> List[dict]:
        """
        Generate a consensus report for the given sample.

        Args:
            min_support (float): Minimum support threshold for consensus calls.

        Returns:
            List[dict]: Consensus report for the given sample.
        """
        result = list()
        for gene in self.genes:
            d = gene.consensus_dict(min_support)
            d["sample"] = self.sample
            result.append(d)
        return result
