"""
Consensus HLA Genotyping Module.

This module generates consensus HLA genotypes from multiple genotyping algorithm
results. It handles the integration of results from different HLA typing tools,
resolves conflicts, and produces high-confidence consensus calls. It is initially
designed to work with the JSON reports generated by the IKMB HLA genotyping pipeline.

Input formats:
- JSON reports from IKMB HLA genotyping pipeline

Author: Nicolás Mendoza Mejía (2023)
"""

from typing import List, Tuple

from ..allele import Allele, build_allele_tree
from ..argtypes import output_path
from .ikmb_report import Gene, Report, read_json


def setup_parser(subparsers):
    """
    Set up the argument parser for the consensus command.

    Args:
        subparsers: The subparsers object to add this command to.

    Returns:
        argparse.ArgumentParser: The configured parser for consensus.
    """
    parser = subparsers.add_parser(
        name="consensus",
        description="""
        This program finds a consensus between multiple HLA genotyping reports
        """,
        epilog="Author: Nicolás Mendoza Mejía (2023)",
    )
    parser.add_argument(
        "input",
        metavar="path",
        type=str,
        nargs="+",
        help="JSON files with HLA genotyping reports from the IKMB pipeline",
    )
    parser.add_argument(
        "--output",
        metavar="path",
        type=output_path,
        help="Path to output file",
        default="output.alt",
    )

    parser.set_defaults(func=call_function)

    return parser


def call_function(args):
    """
    Main function to execute consensus genotyping.

    Processes multiple JSON genotyping reports and generates consensus
    HLA calls using evidence-based algorithms. Outputs results in
    allele table format.

    Args:
        args: Parsed command line arguments containing:
            - input: List of JSON file handles with genotyping reports
            - output: Path to output consensus file
    """
    reports = list()
    for file in args.input:
        j = read_json(file)
        report = ConsensusReport(j)
        reports.extend(report.consensus())
    print(reports)


class ConsensusGene(Gene):
    def get_consensus_call(self) -> Tuple[List[str], List[float]]:
        """
        Determine the consensus alleles and returns two values

        Returns:
            alleles: list of consensus alleles
            support: percentage of algorithms supported the consensus alleles
        """
        allele_list = [
            Allele(a, gene=self.name)
            for alleles in self.calls.values()
            for a in alleles
        ]
        tree = build_allele_tree(self.name, allele_list)
        alleles, support = tree.get_consensus(0.6)
        return alleles, support

    def consensus_dict(self) -> dict:
        """
        Convert this object into a dictionary
        """
        alleles, support = self.get_consensus_call()
        return {
            "gene": self.name,
            "coverage": self.mean_coverage(),
            "alleles": alleles,
            "support": support,
        }


class ConsensusReport(Report):
    def __parse_gene__(
        self, name: str, coverage: List[dict], calls: dict
    ) -> ConsensusGene:
        return ConsensusGene(name, coverage, calls)

    def consensus(self) -> List[dict]:
        result = list()
        for gene in self.genes:
            d = gene.consensus_dict()
            d["sample"] = self.sample
            result.append(d)
        return result
